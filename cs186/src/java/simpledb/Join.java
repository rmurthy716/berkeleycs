package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;

    private boolean existsOuterTuples = true;
    private boolean getOuterTuples = true;
    private Tuple outerTuple = null;
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
	this.p = p;
	this.child1 = child1;
	this.child2 = child2;
	try {
	    this.child1.open();
	    this.child2.open();
	}
	catch (Exception e) {}
    }

    public JoinPredicate getJoinPredicate() {
        return this.p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return this.child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return this.child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        TupleDesc t1 = this.child1.getTupleDesc();
	TupleDesc t2 = this.child2.getTupleDesc();
	TupleDesc joined = TupleDesc.merge(t1,t2);
	return joined;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
	super.open();
    }

    public void close() {
	super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
	child1.rewind();
	child2.rewind();
    }
    
    
    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
	if (outerTuple == null && child1.hasNext()) {
	    outerTuple = child1.next();
	    child2.rewind();
	}

	while (child1.hasNext() || child2.hasNext()) {
	    while (child2.hasNext()) {
		Tuple innerTuple = child2.next();
		if (outerTuple != null
		    && this.p.filter(outerTuple, innerTuple)
		    && innerTuple != null) {
		    return joinTuple(outerTuple,
				     innerTuple,
				     this.getTupleDesc());
		}
	    }

	    if (child1.hasNext()) {
		child2.rewind();
		outerTuple = child1.next();
	    }
	}
	return null;
    }
		
    private Tuple joinTuple(Tuple t1, Tuple t2, TupleDesc td) {
	int numFields = td.numFields();
	int outerFields = t1.getTupleDesc().numFields();
	Tuple output = new Tuple(td);
	
	for(int i = 0; i < outerFields; i++) {
	    output.setField(i, t1.getField(i));
	}
	
	for(int i = outerFields; i < numFields; i++) {
	    output.setField(i, t2.getField(i - outerFields));
	}
	
	return output;
    }
		

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[] { this.child1, this.child2 };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
	this.child1 = children[0];
	this.child2 = children[1];
    }
}
